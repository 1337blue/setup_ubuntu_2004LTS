- name: Setup working environment
  hosts: localhost
  vars:
    terraform_version: 0.12.25
    git_email: phillip.lichtblau@gmx.de
    git_username: 1337blue
    non_sudo_user: "{{ lookup ('env', 'SUDO_USER') }}"
    tmp_dir: /tmp/ansible
    vscode_settings: /home/{{ non_sudo_user }}/.config/Code/User/settings.json
    repos:
      enpass: deb https://apt.enpass.io/ stable main
      opera-stable: deb [arch=i386,amd64] https://deb.opera.com/opera-stable/ stable non-free
      vscode: deb [arch=amd64] https://packages.microsoft.com/repos/vscode stable main
      virtualbox-6.1: deb [arch=amd64] https://download.virtualbox.org/virtualbox/debian focal contrib

  tasks:
    - name: Create tmp dir
      file:
        path: "{{ tmp_dir }}"
        state: directory
        mode: '755'

    - name: Add git email
      git_config:
        name: user.email
        scope: system
        value: "{{ git_email }}"
      when:
        - '"@" in git_email'

    - name: Add git user name
      git_config:
        name: user.name
        scope: system
        value: "{{ git_username }}"
      when:
        - 'git_username|length > 1'

    - name: Upgrade Packages
      apt:
       update_cache: yes
       upgrade: full

    - name: Install Packages
      apt:
        name: "{{ packages }}"
      vars:
        packages:
        - ansible-lint
        - awscli
        - docker-compose
        - docker.io
        - jq
        - software-properties-common
        - apt-transport-https
        - wget
        - net-tools
        - vim
        - htop
        - tree
        - iotop
        - linux-headers-generic
        - openvpn
        - ruby-dev
        - ruby-libxml
        - build-essential
        - patch
        - zlib1g-dev
        - liblzma-dev
        - libxml2-dev
        - libcurl4-openssl-dev

    - name: Pull and start jenkins container
      docker_container:
        name: jenkins
        image: jenkins/jenkins:lts
        ports: 8080:8080
      async: 600
      poll: 0
      register: jenkins_container
      notify: Sleep if Jenkins container is fresh

    - name: Import GPG keys
      apt_key:
        url: "{{ item }}"
      with_items:
        - https://packages.microsoft.com/keys/microsoft.asc
        - https://deb.opera.com/archive.key
        - https://apt.enpass.io/keys/enpass-linux.key
        - https://www.virtualbox.org/download/oracle_vbox_2016.asc
        - https://www.virtualbox.org/download/oracle_vbox.asc

    - name: Add apt repos
      apt_repository:
        repo: "{{ item.value }}"
        filename: "{{ item.key }}"
      loop: "{{ lookup ('dict', repos) }}"

    - name: Install non standard packages
      apt:
        name: "{{ item.key }}"
      when: not item.key == "vscode"
      loop: "{{ lookup ('dict', repos) }}"

    - name: Install the special kids
      apt:
        name:
        - code
        - virtualbox-6.1

    - name: Install Snaps apps
      snap:
        name: "{{ item }}"
        classic: yes
      with_items:
        - 1password-linux
        - slack

    # vagrant depends on virtualbox
    - name: Install Vagrant
      apt:
        name: vagrant

    - name: Install Vagrant plugins
      command: vagrant plugin install {{ item }}
      with_items:
        - vagrant-aws
      changed_when: False

    - name: Is latest terraform installed?
      command: terraform -v
      register: is_terraform_installed
      ignore_errors: yes
      changed_when: not is_terraform_installed.rc == 0

    - name: Download terraform binary
      get_url:
        url: https://releases.hashicorp.com/terraform/{{ terraform_version }}/terraform_{{ terraform_version }}_linux_amd64.zip
        dest: "{{ tmp_dir }}"
      when: (not is_terraform_installed.rc == 0 or not terraform_version in is_terraform_installed.stdout_lines[0])

    - name: Install terraform
      unarchive:
        src: "{{ tmp_dir }}/terraform_{{ terraform_version }}_linux_amd64.zip"
        dest: /usr/bin
        mode: '755'
      when: (not is_terraform_installed.rc == 0 or not terraform_version in is_terraform_installed.stdout_lines[0])

    - name: fetch VS Code extensions
      become: yes
      become_user: "{{ non_sudo_user }}"
      command: code --list-extensions
      register: vs_code_extensions
      changed_when: false

    - name: Install VS Code extensions
      become: yes
      become_user: "{{ non_sudo_user }}"
      command: code --install-extension "{{ item }}"
      when: item not in vs_code_extensions.stdout
      with_items:
      - DavidAnson.vscode-markdownlint
      - dbaeumer.vscode-eslint
      - eamodio.gitlens
      - HookyQR.beautify
      - janjoerke.jenkins-pipeline-linter-connector
      - jmMeessen.jenkins-declarative-support
      - magicstack.MagicPython
      - hashicorp.terraform
      - mhutchie.git-graph
      - ms-python.python
      - ms-azuretools.vscode-docker
      - redhat.vscode-yaml
      - teledemic.branch-warnings
      - tht13.python
      - vscodevim.vim

    - name: Wait for asynchronous docker job to end
      async_status:
        jid: '{{ jenkins_container.ansible_job_id }}'
      register: jenkins_docker_result
      until: jenkins_docker_result.finished
      retries: 30

    - name: Check if vscode settings.json exists
      stat:
        path: "{{ vscode_settings }}"
      register: st

    - name: Copy vscode settings.json
      copy:
        src: ./conf/settings.json
        dest: "{{ vscode_settings }}"
        owner: "{{ non_sudo_user }}"
        group: "{{ non_sudo_user }}"
        mode: '0644'
      when: not st.stat.exists

    - name: Increase watch limit for VSCode
      lineinfile:
        path: /etc/sysctl.conf
        state: present
        line: fs.inotify.max_user_watches=524288

    - name: Cleanup apt
      apt:
        autoremove: yes
        autoclean: yes

    - name: Cleanup tmp dir
      file:
        path: "{{ tmp_dir }}"
        state: absent

  handlers:
    - name: Sleep if Jenkins container is fresh
      command: sleep 10
      when: jenkins_docker_result.changed
      notify: Get jenkins admin pw

    - name: Get jenkins admin pw
      command: 'docker exec -i jenkins cat /var/jenkins_home/secrets/initialAdminPassword'
      register: jenkins_admin_pw
      notify: Print jenkins admin pw

    - name: Print jenkins admin pw
      debug:
        msg: 'Jenkins Admin PW: {{ jenkins_admin_pw.stdout_lines[0] }}'
