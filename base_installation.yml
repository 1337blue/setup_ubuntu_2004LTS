- name: Setup working environment
  hosts: localhost
  vars:
    terraform_version: 0.12.29
    tflint_version: 0.20.3
    terraform_docs_version: 0.10.1
    vagrant_version: 2.2.10
    git_email: x
    git_username: 1337blue
    tmp_dir: /tmp/ansible
    setup_open_ssh_server: false
    username: "{{ lookup ('env', 'USER') }}"
    vscode_settings: /home/{{ username }}/.config/Code/User/settings.json
    repos:
      enpass: deb https://apt.enpass.io/ stable main
      opera-stable: deb [arch=i386,amd64] https://deb.opera.com/opera-stable/ stable non-free
      virtualbox-6.1: deb [arch=amd64] https://download.virtualbox.org/virtualbox/debian focal contrib
      vscode: deb [arch=amd64] https://packages.microsoft.com/repos/vscode stable main

  tasks:
    - name: Create tmp dir
      file:
        path: "{{ tmp_dir }}"
        state: directory
        mode: '0755'

    - name: Add git email
      git_config:
        name: user.email
        scope: system
        value: "{{ git_email }}"
      become: yes
      when:
        - '"@" in git_email'

    - name: Add git user name
      git_config:
        name: user.name
        scope: system
        value: "{{ git_username }}"
      become: yes
      when:
        - 'git_username|length > 1'

    - name: Upgrade Packages
      apt:
       update_cache: yes
       upgrade: full
      become: yes

    - name: Install Packages
      apt:
        name: "{{ packages }}"
      become: yes
      vars:
        packages:
        - ansible-lint
        - apt-transport-https
        - awscli
        - build-essential
        - docker-compose
        - docker.io
        - golang-go
        - hddtemp
        - htop
        - iotop
        - jq
        - keepassxc
        - liblzma-dev
        - libxml2-dev
        - libcurl4-openssl-dev
        - linux-headers-generic
        - lm-sensors
        - net-tools
        - openssh-server
        - openvpn
        - patch
        - ruby-dev
        - ruby-libxml
        - smartmontools
        - software-properties-common
        - tree
        - vim
        - wget
        - zlib1g-dev

    - name: Allow SSH password authentication
      become: yes
      lineinfile:
        state: present
        regexp: '.*PasswordAuthentication.*'
        line: 'PasswordAuthentication yes'
        path: /etc/ssh/sshd_config
        validate: sshd -t -f %s
      notify: Enable and restart sshd
      when: setup_open_ssh_server | bool

    - name: Import GPG keys
      apt_key:
        url: "{{ item }}"
      become: yes
      with_items:
        - https://packages.microsoft.com/keys/microsoft.asc
        - https://deb.opera.com/archive.key
        - https://apt.enpass.io/keys/enpass-linux.key
        - https://www.virtualbox.org/download/oracle_vbox_2016.asc
        - https://www.virtualbox.org/download/oracle_vbox.asc

    - name: Add apt repos
      apt_repository:
        repo: "{{ item.value }}"
        filename: "{{ item.key }}"
      become: yes
      loop: "{{ lookup ('dict', repos) }}"

    - name: Install non standard packages
      apt:
        name: "{{ item.key }}"
      become: yes
      when: not item.key == "vscode"
      loop: "{{ lookup ('dict', repos) }}"

    - name: Install the special kids
      become: yes
      apt:
        name:
        - code
        - virtualbox-6.1

    - name: Install Snap apps
      snap:
        name: "{{ item }}"
        classic: yes
      become: yes
      with_items:
        - 1password-linux
        - kubectl
        - notepad-plus-plus
        - slack

    # vagrant depends on virtualbox
    - name: Install vagrant
      apt:
        deb: https://releases.hashicorp.com/vagrant/{{ vagrant_version }}/vagrant_{{ vagrant_version }}_x86_64.deb
      become: yes

    # vagrant depends on virtualbox
    - name: Install Vagrant
      apt:
        name: vagrant
      become: yes

    - name: Is latest terraform installed?
      command: terraform -v
      register: is_terraform_installed
      ignore_errors: yes
      changed_when: not is_terraform_installed.rc == 0

    - name: Download terraform binary
      get_url:
        url: https://releases.hashicorp.com/terraform/{{ terraform_version }}/terraform_{{ terraform_version }}_linux_amd64.zip
        dest: "{{ tmp_dir }}"
      when: (not is_terraform_installed.rc == 0 or not terraform_version in is_terraform_installed.stdout_lines[0])

    - name: Install terraform
      unarchive:
        src: "{{ tmp_dir }}/terraform_{{ terraform_version }}_linux_amd64.zip"
        dest: /usr/bin
        mode: '0755'
        owner: root
        group: root
      become: yes
      when: (not is_terraform_installed.rc == 0 or not terraform_version in is_terraform_installed.stdout_lines[0])

    - name: Is tflint installed?
      command: tflint -v
      register: is_tflint_installed
      ignore_errors: yes
      changed_when: not is_tflint_installed.rc == 0

    - name: Download tflint binary
      get_url:
        url: https://github.com/terraform-linters/tflint/releases/download/v{{ tflint_version }}/tflint_linux_amd64.zip
        dest: "{{ tmp_dir }}"
      when: (not is_tflint_installed.rc == 0 or not tflint_version in is_tflint_installed.stdout_lines[0])

    - name: Unzip tflint
      unarchive:
        src: "{{ tmp_dir }}/tflint_linux_amd64.zip"
        dest: /usr/bin
        mode: '0755'
        owner: root
        group: root
      become: yes
      when: (not is_tflint_installed.rc == 0 or not tflint_version in is_tflint_installed.stdout_lines[0])

    - name: Is terraform-docs installed?
      command: terraform-docs -v
      register: is_terraform_docs_installed
      ignore_errors: yes
      changed_when: not is_terraform_docs_installed.rc == 0

    - name: Download terraform-docs binary
      get_url:
        url: https://github.com/terraform-docs/terraform-docs/releases/download/v{{ terraform_docs_version }}/terraform-docs-v{{ terraform_docs_version }}-linux-amd64
        dest: /usr/bin/terraform-docs
        mode: '0755'
      become: yes
      when: (not is_terraform_docs_installed.rc == 0 or not terraform_docs_version in is_terraform_docs_installed.stdout_lines[0])

    - name: fetch VS Code extensions
      command: code --list-extensions
      register: vs_code_extensions
      changed_when: false

    - name: Install VS Code extensions
      command: code --install-extension "{{ item }}"
      when: item not in vs_code_extensions.stdout
      with_items:
      - DavidAnson.vscode-markdownlint
      - dbaeumer.vscode-eslint
      - eamodio.gitlens
      - hashicorp.terraform
      - HookyQR.beautify
      - janjoerke.jenkins-pipeline-linter-connector
      - jmMeessen.jenkins-declarative-support
      - magicstack.MagicPython
      - mhutchie.git-graph
      - ms-python.python
      - ms-azuretools.vscode-docker
      - redhat.vscode-yaml
      - teledemic.branch-warnings
      - tht13.python
      - vscodevim.vim

    - name: Check if vscode settings.json exists
      stat:
        path: "{{ vscode_settings }}"
      register: st

    - name: Copy vscode settings.json
      copy:
        src: ./conf/settings.json
        dest: "{{ vscode_settings }}"
        mode: '0644'
      when: not st.stat.exists

    - name: Increase watch limit for VSCode
      become: yes
      lineinfile:
        path: /etc/sysctl.conf
        state: present
        line: fs.inotify.max_user_watches=524288

    - name: Cleanup apt
      apt:
        autoremove: yes
        autoclean: yes
      become: yes

    - name: Cleanup tmp dir
      file:
        path: "{{ tmp_dir }}"
        state: absent
      become: yes

  handlers:
    - name: Enable and restart sshd
      become: yes
      service:
        name: sshd
        enabled: yes
        state: restarted

